{"version":3,"file":"static/js/MoviesView.0faf5b25.chunk.js","mappings":"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","sources":["components/SearchBar.js","components/MoviesView/MoviesView.js","services/Status.js","services/movie-api.js","services/stylePagination.js","views/ImgesErrorView.js","views/ViewItem.js"],"sourcesContent":["import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nexport default function SearchBar({ onSubmit }) {\n    const [querry, setQuerry] = useState('');\n    \n    const handleNameChange = e => {\n        setQuerry(e.target.value.toLowerCase());\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (querry.trim() === '') {\n            toast.error('Enter your search');\n            return;\n        }\n\n        onSubmit(querry);\n        setQuerry('');\n    };\n\n    return (\n        <section>\n            <form onSubmit={handleSubmit}>\n                <button type=\"submit\"><span>Search...</span></button>\n                <input value={querry} onChange={handleNameChange} type=\"text\" autoComplete=\"off\" autoFocus />\n            </form>\n        </section>\n    );\n}\n\nSearchBar.propTypes = { imageName: PropTypes.string, };","import { useState, useEffect } from \"react\";\nimport { useLocation, useHistory, useRouteMatch } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport * as movieAPI from '../../services/movie-api';\nimport Loader from \"components/Loader\";\nimport SearchBar from \"components/SearchBar\";\nimport ImageErrorView from \"views/ImgesErrorView\";\nimport useStyles from \"services/stylePagination\";\nimport ViewItem from \"views/ViewItem\";\nimport Status from \"services/Status\";\nimport Pagination from '@material-ui/lab/Pagination';\n\nexport default function MoviesView() {\n    const classes = useStyles();\n    const [status, setStatus] = useState(Status.IDLE);\n    const [error, setError] = useState(null);\n    const [movies, setMovies] = useState(null);\n    const location = useLocation();\n    const history = useHistory();\n    const { url } = useRouteMatch();\n    const [totalPage, setTotalPage] = useState(null);\n    const [query, setQuery] = useState('');\n    const page = new URLSearchParams(location.search).get('page') ?? 1;\n\n    useEffect(() => {\n        if (location.search === '') {\n            return;\n        }\n    \n        const newSearch = new URLSearchParams(location.search).get('query');\n        setQuery(newSearch, page);\n    }, [location.search, page]);\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        }\n        setStatus(Status.PENDING);\n        movieAPI.fetchSearchMovie(query, page).then(({ results, total_pages }) => {\n            if (results.length === 0) {\n                toast.error('Not found');\n            }\n            setMovies(results);\n            setTotalPage(total_pages);\n            setStatus(Status.RESOLVED);\n        }).catch(error => {\n            setError(error);\n            setStatus(Status.REJECTED);\n        });\n        console.log(page);\n    }, [query, page]);\n\n    const handleFormSubmit = newSearch => {\n        if (query === newSearch) return;\n        setQuery(newSearch);\n        setMovies(null);\n        history.push({ ...location, search: `query=${newSearch}&page=1`, });\n    };\n    const handleChange = (e, page) => {\n        history.push({ ...location, search: `query=${query}&page=${page}` });\n      };\n\n    return (\n        <>\n            <SearchBar onSubmit={handleFormSubmit} />\n            {status === Status.PENDING && <Loader />}\n            {status === Status.REJECTED && (<ImageErrorView message={error.message} />)}\n            {movies && status === Status.RESOLVED && (\n                <ul>\n                    {movies.map(movie => (\n                        <ViewItem key={movie.id}\n                            images={movie.poster_path}\n                            id={movie.id}\n                            title={movie.title}\n                            from={`${url}/${location.search}`}\n                        />))}\n                </ul>\n            )}\n            {totalPage > 1 && (\n                <Pagination\n                    className={classes.root}\n                    count={totalPage}\n                    size=\"large\"\n                    page={Number(page)}\n                    shape=\"rounded\"\n                    showFirstButton\n                    showLastButton\n                    onChange={handleChange}\n                />\n            )}\n        </>\n    );\n}","const Status = {\n    IDLE: 'idle',\n    PENDING: 'pending',\n    RESOLVED: 'resolved',\n    REJECTED: 'rejected',\n};\n\nexport default Status;","// const BASE_URL = 'https://api.themoviedb.org/3';\n// const API_KEY = '8620b0972e59ad7d1bfd77d28c680ffe'; //API (v3 auth)\n\n// async function fetchWithErrorHandling(url = '', config = {}) {\n//     const response = await fetch(url, config);\n//     return response.ok ? await response.json() : Promise.reject(new Error('Sory, not found your search'));\n// }\n// //popular list of films today, main page\n// export function  fetchTrending(page) {\n//     return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`);\n// }\n\n// //search some films\n// export function featchSearchMovie(query, page) {\n//     return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`,);\n// }\n\n// export function fetchDetailsMovie(movieId) {\n//     return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`,);\n// }\n\n// //personal film information\n// export function fetchDetailsMovieVideo(movieId) {\n//     return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`,);\n// }\n\n// //this film's actors\n// export function fetcthActorsMovie(movieId) {\n//     return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,);\n// }\n\n// //this film's review\n// export function fetchReviewsMovie(movieId) {\n//     return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,);\n// }\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3e578bff48344bae402706e1fb82ceb7'; //Ключ API (v3 auth)\n// const IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n//список самых популярных фильмов на сегодня для создания коллекции на главной странице.\nexport function fetchTrending(page) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=${page}`,\n  );\n}\n// поиск кинофильма по ключевому слову на странице фильмов.\nexport function fetchSearchMovie(query, page) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=false`,\n  );\n  //\n}\n//запрос полной информации о фильме для страницы кинофильма.\nexport function fetchDetailsMovie(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n  );\n}\n//запрос полной информации о фильме для страницы кинофильма.\nexport function fetchDetailsMovieVideo(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/videos?api_key=${API_KEY}&language=en-US`,\n  );\n}\n//запрос информации о актёрском составе для страницы кинофильма.\nexport function fetcthActorsMovie(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n  );\n}\n//запрос обзоров для страницы кинофильма.\nexport function fetchReviewsMovie(movieId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\n  );\n}","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    padding: '20px 0',\n\n    '& .MuiPaginationItem-page.Mui-selected, & .MuiPaginationItem-page.Mui-selected:hover, & .MuiPaginationItem-page.Mui-selected.Mui-focusVisible,  & .MuiPaginationItem-page:hover, & .MuiPaginationItem-page.Mui-focusVisible':\n      {\n        backgroundColor: '#6c5b7b',\n      },\n    '& .MuiPaginationItem-root': {\n      color: '#000000',\n    },\n    '& .MuiPaginationItem-page:hover, & .MuiPaginationItem-page.Mui-focusVisible':\n      {\n        opacity: '0.7',\n      },\n    '& .MuiPaginationItem-page.Mui-selected:hover, & .MuiPaginationItem-page.Mui-selected.Mui-focusVisible':\n      {\n        opacity: '1',\n      },\n    '& .MuiPagination-ul': {\n      justifyContent: 'center',\n    },\n  },\n});\n\nexport default useStyles;","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nexport default function ImageErrorView({ message }) {\n    return toast.error(`${message}`);\n}\n\nImageErrorView.propTypes = {\n    message:PropTypes.string,\n}","import { useLocation, NavLink } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport slugify from 'slugify';\nimport noImages from '../images/images.png';\n\nexport default function ViewItem({ id, title, images, rating }) {\n    const location = useLocation();\n    const IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\n    const makeSlug = string => slugify(string, { lower: true, });\n    \n    return (\n        <li key={id} className=\"movies_item\">\n            <NavLink to={{\n                pathname: `/movies/${makeSlug(`${title}${id}`)}`,\n                state: { from: location },\n            }}>\n                <div ></div>\n                <img src={images ? `${IMG_URL}${images}` : noImages}\n                    alt={title}\n                    width=\"300\"\n                />\n                <p className=\"movies__title\">{title}</p>\n                <p className=\"movies__item-rating\">{rating}</p>\n            </NavLink>\n        </li>\n    );\n}\n\nViewItem.propTypes = {\n    id: PropTypes.number,\n    title: PropTypes.string,\n};"],"names":["SearchBar","onSubmit","useState","querry","setQuerry","e","preventDefault","trim","toast","type","value","onChange","target","toLowerCase","autoComplete","autoFocus","MoviesView","classes","useStyles","Status","status","setStatus","error","setError","movies","setMovies","location","useLocation","history","useHistory","url","useRouteMatch","totalPage","setTotalPage","query","setQuery","page","URLSearchParams","search","get","useEffect","newSearch","movieAPI","then","results","total_pages","length","catch","console","log","push","Loader","message","map","movie","ViewItem","images","poster_path","id","title","from","Pagination","className","root","count","size","Number","shape","showFirstButton","showLastButton","IDLE","PENDING","RESOLVED","REJECTED","BASE_URL","API_KEY","fetchWithErrorHandling","config","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovie","fetchDetailsMovie","movieId","fetchDetailsMovieVideo","fetcthActorsMovie","fetchReviewsMovie","makeStyles","display","justifyContent","padding","backgroundColor","color","opacity","ImageErrorView","propTypes","PropTypes","string","rating","to","pathname","slugify","lower","state","src","noImages","alt","width"],"sourceRoot":""}